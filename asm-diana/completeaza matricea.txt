//completeaza matricea cu valori de la 100 in jos, din 1 in 1, in limita size-ului

	int mat[3][3] = {};
	int* p = (int*)mat;
	int L = 3;
	int C = 3;
	int i, j;
	_asm {
		mov eax, 0;
		mov ebx, 0;
		mov ecx, 0;
		mov edx, 0;
		mov esi, p;
		mov edi, 0;

		push C;
		push L;
		push esi;
		call myfunc;
		add esp, 12;

		jmp ext;

	myfunc:
		push ebp;
		mov ebp, esp;

		mov esi, [ebp + 8]; //pointer la matrice
		mov ecx, [ebp + 12]; //ecx=L
		mov ebx, [ebp + 16]; //ebx=C 


		mov i, 0;
		mov edi, dword ptr 100;
	for1:
		cmp i, ecx; //i<L
		jge afara_din_for1;
		mov j, 0;
	for2:
		cmp j, ebx; //j<C
		jge afara_din_for2;
		//i*C+j
		mov eax, i;
		mul ebx; //eax=C*i
		add eax, j; //eax=i*C+j
		mov [esi + eax * 4], edi;
		dec edi;
		inc j;
		jmp for2;
	afara_din_for2:
		inc i;
		jmp for1;
	afara_din_for1:
		pop ebp;
		ret; 

	ext:
		nop;
	}